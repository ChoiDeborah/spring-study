- 핸들러 메소드 4부: 폼 서브밋 (타임리프)

폼을 보여줄 요청 처리
●GET /events/form
●뷰 : events/form.html
●모델 : “event”, new Event()

타임리프
● @{}: URL 표현식
● ${}: variable 표현식
● *{}: selection 표현식


- 핸들러 메소드 6부: @Validated

스프링 MVC 핸들러 메소드 아규먼트에 사용할 수 있으며 validation group이라는 힌트를 사용할 수 있다.

@Valid애노테이션에는 그룹을 지정할 방법이 없다.
@Validated는 스프링이 제공하는 애노테이션으로 그룹 클래스를 설정할 수 있다.

- 핸들러 메소드 7부: 폼 서브밋 (에러 처리)

  바인딩 에러 발생 시 Model에 담기는 정보
  ● Event
  ● BindingResult.event

타임리프 사용시 바인딩 에러 보여주기
● https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#field-errors
<p th:if="${#fields.hasErrors('limit')}" th:errors="*{limit}">Incorrect date</p>

Post / Redirect / Get 패턴
● https://en.wikipedia.org/wiki/Post/Redirect/Get
● Post

이후에 브라우저를 리프래시 하더라도 폼 서브밋이 발생하지 않도록 하는 패턴

타임리프 목록 보여주기
● https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#listing-seed-starter-dat
  a

<a th:href="@{/events/form}">Create New Event</a>
<div th:unless="${#lists.isEmpty(eventList)}">
<ul th:each="event: ${eventList}">
<p th:text="${event.Name}">Event Name</p>
</ul>
</div>

- 핸들러 메소드 8부: @SessionAttributes

모델 정보를 HTTP 세션에 저장해주는 애노테이션
    ● HttpSession을 직접 사용할 수도 있지만
    ● 이 애노테이션에 설정한 이름에 해당하는 모델 정보를 자동으로 세션에 넣어준다.
    ● @ModelAttribute는 세션에 있는 데이터도 바인딩한다.
    ● 여러 화면(또는 요청)에서 사용해야 하는 객체를 공유할 때 사용한다.

SessionStatus를 사용해서 세션 처리 완료를 알려줄 수 있다.
    ● 폼 처리 끝나고 세션을 비울 때 사용한다.

- 핸들러 메소드 9부: 멀티 폼 서브밋

세션을 사용해서 여러 폼에 걸쳐 데이터를 나눠 입력 받고 저장하기
  ● 이벤트 이름 입력받고
  ● 이벤트 제한 인원 입력받고
  ● 서브밋 -> 이벤트 목록으로!

완료된 경우에 세션에서 모델 객체 제거하기
  ●   SessionStatus

- 핸들러 메소드 10부: @SessionAttribute

  HTTP 세션에 들어있는 값 참조할 때 사용
    ● HttpSession을 사용할 때 비해 타입 컨버전을 자동으로 지원하기 때문에 조금 편리함.
    ● HTTP세션에 데이터를 넣고 빼고 싶은 경우에는 HttpSession을 사용할 것.


  @SessionAttributes와는 다르다.
    ● @SessionAttributes는 해당 컨트롤러 내에서만 동작.
        ○ 즉 해당 컨트롤러 안에서 다루는 특정 모델 객체를 세션에 넣고 공유할 때 사용.
  ● @SessionAttribute는 컨트롤러 밖(인터셉터 또는 필터 등)에서 만들어 준 세션 데이터에 접근할 때 사용한다.

- 핸들러 메소드 11부: RedirectAttributes

리다이렉트 할 때 기본적으로 Model에 들어있는 primitive type 데이터는 URI 쿼리 매개변수에 추가된다.
    ● 스프링 부트에서는 이 기능이 기본적으로 비활성화 되어 있다.
    ● Ignore-default-model-on-redirect 프로퍼티를 사용해서 활성화 할 수 있다.
원하는 값만 리다이렉트 할 때 전달하고 싶다면 RedirectAttributes에 명시적으로 추가할 수 있다.

리다이렉트 요청을 처리하는 곳에서 쿼리 매개변수를 @RequestParam 또는 @ModelAttribute로 받을 수
있다.