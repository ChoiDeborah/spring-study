[스프링 IoC 컨테이너 연동]
기존에 있던 Sevlet Application에 Spring을 사용해 보겠다.

1. 스프링이 제공하는 IoC 컨테이너를 사용하겠다.
    - 먼저 의존성 추가 org.springframework 추가
    - pom.xml
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>5.2.10.RELEASE</version>
    </dependency>

    - web.xml 스프링이 제공해 주는 Listener : ContextLoaderListener 추가
    :   스프링 IoC 컨테이너 즉, Spring Application Context 서블릿 어플리케이션의 생명주기에 맞춰서 바인딩 해주는 것
        웹 어플리케이션에 등록되어있는 서블릿들이 사용할 수 있도록 에플리케이션 컨텍스트를 만들어(스프링 설정파일이 필요함)서 이것을 서블릿 컨텍스트에 등록을 해준다.
        그리고 서블릿이 종료될 시점에 어플리케이션 컨텍스트를 제거해준다.
        - web.xml
        <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>

    - 스프링 설정 파일이 있어야 Application Context를 사용할 수 있다.
    :   리스너가 사용하는 파라미터 들이 있(컨텍스트 설정파일의 위치, 생성할 어플리케이션 컨텍스트의 타입 등)
        기본으로는 XML 기반의 Application Context를 사용하나, 자바설정파일로 설정해보겠다.

        - web.xml
        <context-param>
            <param-name>contextClass</param-name>
            <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
        </context-param>
        Listener가 만들어주는 AppilcationClass의 타입을 contextClass
        ApplicationContext의 타입을 AnnotationConfigWebApplicationContext

        <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>me.deborah.AppConfig</param-value>
        </context-param>

        contextConfigLocation 위치에 자바설정파일(AppConfig.java)을 만들것임.
        자바 설정파일의 위치를 주면 이 정보를 활용하여 컨텍스트 로더 리스너가 AnnotationConfigWebApplicationContext를 만들면서
        이 설정파일을 가지고 만든다.

        그럼 어플리케이션 컨텍스트 안에는 HelloService가 Bean으로 등록되어 있음.
        그럼 우리가 만든 서블릿에서 어플리케이션 컨텍스트를 통해 HelloService를 사용할 수 있음!!

        컨텍스트 파라미터는 필터보다 먼저 등록되어있어야 함.

    - 서블릿으로 가서 등록된 어플리케이션 컨텍스트를 가져올 수 있음.
    ContextLoaderListener 가 Servlet Context(공용의 저장소로 생각하면 됨)에
    contextInitialized 시점에 initWebApplicationContext에서
    servletContext.setAttribute로 WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE라는
    이름으로 어플리케이션 컨텍스트를 등록 함.
    따라서 이 이름으로 가져올 수 있다.
    getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)
    여기서 빈으로 등록된 애들 가져올 수있음.

2. 스프링이 제공하는 MVC를 사용하겠다.