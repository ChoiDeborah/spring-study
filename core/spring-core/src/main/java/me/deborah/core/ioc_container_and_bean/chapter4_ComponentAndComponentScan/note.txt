@ComponentScan
스프링 3.1 부터 도입이 되었음.

주요 기능 1)
BasePakages 스캔 위치 설정
가장 중요한 설정이 BasePakages임
BasePakages값이 문자열인데 타입 세이프 하지 않다.
그래서 basePackageClasses라는 값을 주면
값에 전달된 클래스 기준으로 컴포넌트 스캔을 시작한다.

보통 기본 값은 컴포넌트 스캔을 붙이고 있는 @Configuration 부터 컴포넌트 스캔을 시작한다.
패키지안과 패키지 하위까지 컴포넌트 스캔을 한다.

근데 패키지 밖에있는건 안됨. 스캔의 범위를 지정하는 중요한 기능을 함.

주요 기능 2)
@Filter임
컴포넌트 스캔을 한다고 해서 모든 어노테이션을 빈으로 등록하는건 아님.
스캔하는 중에 특정한 것을 걸러주는 게 있음.

단점 애플리케이션 컨텍스트 같은 경우
싱글 코어 어플리케이션 은 초기 구동이 오래걸릴 수 있음 등록해야하는 빈이 많을 경우
구동 타임에 한번 약간의 성능을 먹음. 한번 구동되고 되면 괜찮음.

다른 방법을 고려할 수 있음
스프링 5부터 Funational을 사용한 빈 등록 기법

장점.
애플리케이션 구동 타임이 단축됨.
어떤 조건에 따라 등록을 한다던가... 코딩을 할수 있다.

public static void main(String[] args) {
    var app = new SpringApplication(SpringCoreApplication.class);
    app.addInitializers((ApplicationContextInitializer<GenericApplicationContext>) context->
        context.registerBean(MyService.class);
        context.registerBean(ApplicationRunner.calss () =>args1-> System.out.println("Funational");
    });
    app.run(args);
}


다른 모든 빈들을 만들기 이전에 컴포넌트 스캔을 해서 빈들을 등록을 함.




