- AOP 개념
AOP 는 AOP의 구현체를 제공하며, 또 자바의 만들어져있는 AspectJ와 연동해서 사용할 수 있는 기능 제공
스프링 자체에서 구현한 스프링 AOP 기능을 활용할 수 있다.
이 기능을 기반으로 스프링 트렌젝션이나 캐시 등 여러기능이 제공된다.

- AOP란?
AOP 란 흩어진 Aspect를 모듈화할 수 있는 프로그래밍 기법.
OOP와 나란히 보완 관계임.

유지보수가 쉽지 않은 문제를 Aspect로 흩어져있는 것들을 한군데로 모음
독립적으로 적용 하고 어디에 적용 되어야하는지 정의해줌.

- AOP 주요 개념
 - Aspect(묶어놓은 모듈)와 Target(적용이 되는 대상)
 - Advice(해야할 일)
 - Join Point(매서드 실행시점)와 Point Cut(어디에 적용해야할 지)

- AOP 구현체
 - AOP Wikipedia 참조
 - 자바
  - AspectJ
  - 스프링 AOP

- AOP적용 방법
 - 컴파일 (자바 파일을 클래스 파일로 만들 때 이미 조작이 된 바이트 코드들을 생성)
    AspectJ 쓸 때
 - 로드 타임 (클래스 로딩 시점에 바이트 코드를 매서드를 끼워 넣음)때
    AspectJ 쓸 때
 - 런타임 (A라는 클래스타입의 빈을 만들때 A를 감싼 A타입의 Proxy Bean을 만든다 포록시 빈이 실제 매서드를 호출하기전 Hello먼저 찍는 일을 하고 A를 호출함)
    스프링 AOP 쓸 때 (수업에선 이 쪽만 다룸)

단점 빈을 만드는 과정에서 성능이 듦.
벗, 장점이 많다.

- 스프링 AOP의 특징
  - 프록시 기반의 AOP 구현체
  - 스프링 빈에만 AOP를 적용할 수 있다.
  - 모든 AOP 기능을 제공하는 것이 목적이아니라, 스프링 IoC와 연동하여 엔터프라이즈 어플리케이션에서
    가장 흔한 문제에 대한 해결책을 제공하는 것이 목적

- 프록시 패턴
인터페이스가 있고 클라이언트는 인터페이스 타입으로 프록시 객체를 사용하게 됨
프록시 객체는 타겟 객체를 참조하고 있음 프록시객체가 원래 해야할일을 가지고 있는 객체를 감싸서 실제 클라이언트의 요청을 처리하게됨

- 프록시 패턴의 목적
    - 접근 제어 부가기능 추가

- 프록시 기반 AOP


